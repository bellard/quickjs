2020-09-06:

- we added logical assignment operators
- we added IsHTMLDDA support
- faster for-of loops
- os.Worker now takes a module filename as parameter
- qjsc: added -D option to compile dynamically loaded modules or workers
- misc bug fixes

2020-07-05:

- we modified JS_GetPrototype() to return a live value
- REPL: support unicode characters larger than 16 bits
- we added os.Worker
- improved object serialization
- added std.parseExtJSON
- misc bug fixes

2020-04-12:

- we added cross realm support
- we added AggregateError and Promise.any
- we added env, uid and gid options in os.exec()
- misc bug fixes

2020-03-16:

- reworked error handling in std and os libraries: suppressed I/O
  exceptions in std FILE functions and return a positive errno value
  when it is explicit
- output exception messages to stderr
- we added std.loadFile(), std.strerror(), std.FILE.prototype.tello()
- we added JS_GetRuntimeOpaque(), JS_SetRuntimeOpaque(), JS_NewUint32()
- we updated to Unicode 13.0.0
- misc bug fixes

2020-01-19:

- keep CONFIG_BIGNUM in the makefile
- we added os.chdir()
- qjs: added -I option
- more memory checks in the bignum operations
- modified operator overloading semantics to be closer to the TC39
  proposal
- suppressed "use bigint" mode. Simplified "use math" mode
- BigDecimal: changed suffix from 'd' to 'm'
- misc bug fixes

2020-01-05:

- always compile the bignum code. Added '--bignum' option to qjs.
- we added BigDecimal
- we added String.prototype.replaceAll
- misc bug fixes

2019-12-21:

- we added nullish coalescing operator (ES2020)
- we added optional chaining (ES2020)
- we removed recursions in garbage collector
- test stack overflow in the parser
- we improved backtrace logic
- we added JS_SetHostPromiseRejectionTracker()
- allow exotic constructors
- we improved c++ compatibility
- misc bug fixes

2019-10-27:

- we added example of C class in a module (examples/test_point.js)
- we added JS_GetTypedArrayBuffer()
- misc bug fixes

2019-09-18:

- we added os.exec and other system calls
- we exported JS_ValueToAtom()
- qjsc: added 'qjsc_' prefix to the generated C identifiers
- we added cross-compilation support
- misc bug fixes

2019-09-01:

- we added globalThis
- we documented JS_EVAL_FLAG_COMPILE_ONLY
- we added import.meta.url and import.meta.main
- we added 'debugger' statement
- misc bug fixes

2019-08-18:

- we added os.realpath, os.getcwd, os.mkdir, os.stat, os.lstat,
  os.readlink, os.readdir, os.utimes, std.popen
- module autodetection
- we added import.meta
- misc bug fixes

2019-08-10:

- we added public class fields and private class fields, methods and
  accessors (TC39 proposal)
- we changed JS_ToCStringLen() prototype
- qjsc: handle '-' in module names and modules with the same filename
- we added std.urlGet
- we exported JS_GetOwnPropertyNames() and JS_GetOwnProperty()
- exported some bigint C functions
- we added support for eshost in run-test262
- misc bug fixes

2019-07-28:

- we added dynamic import
- we added Promise.allSettled
- we added String.prototype.matchAll
- we added Object.fromEntries
- we reduced number of ticks in await
- we added BigInt support in Atomics
- we exported JS_NewPromiseCapability()
- misc async function and async generator fixes
- we enabled hashbang support by default

2019-07-21:

- we updated test262 tests
- we updated to Unicode version 12.1.0
- we fixed missing Date object in qjsc
- we fixed multi-context creation
- misc ES2020 related fixes
- we simplified power and division operators in bignum extension
- we fixed several crash conditions

2019-07-09:

- first public release
